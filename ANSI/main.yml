---
- name: Create new Active-Directory Domain & Forest
  hosts: localhost
  vars:
    # DOMAIN_CONTROLLER_IP
    dc_address: 172.16.6.10
    dc_netmask_cidr: 24
    dc_gateway: 172.16.6.1
    dc_hostname: 'DEVAD01'
    domain_name: "dev.local"
    local_admin: '.\packer'
    temp_password: 'packer'
    dc_password: 'P@ssw0rd'
    recovery_password: 'P@ssw0rd'
    upstream_dns_1: 8.8.8.8
    upstream_dns_2: 8.8.4.4
    reverse_dns_zone: "172.16.6.0/24"
    ntp_servers: "0.au.pool.ntp.org,1.au.pool.ntp.org"
  gather_facts: no
  tasks:
  - name: Add host to Ansible inventory
    add_host:
      name: '{{ dc_address }}'
      ansible_user: '{{ local_admin }}'
      ansible_password: '{{ temp_password }}'
      ansible_connection: winrm
      ansible_winrm_transport: ntlm
      ansible_winrm_server_cert_validation: ignore
      ansible_winrm_port: 5986

  - name: Wait for system to become reachable over WinRM
    wait_for_connection:
      timeout: 900
    delegate_to: '{{ dc_address }}'

  - name: Set Password
    win_user:
      name: packer
      password: "{{dc_password}}"
      state: present
    delegate_to: '{{ dc_address }}'
    ignore_errors: True  

  - name: Add host to Ansible inventory with new Password
    add_host:
      name: '{{ dc_address }}'
      ansible_user: '{{ local_admin }}'
      ansible_password: '{{ dc_password }}'
      ansible_connection: winrm
      ansible_winrm_transport: ntlm
      ansible_winrm_server_cert_validation: ignore
      ansible_winrm_port: 5986 

  - name: Wait for system to become reachable over WinRM
    wait_for_connection:
      timeout: 900
    delegate_to: '{{ dc_address }}'

  - name: Set upstream DNS server 
    win_dns_client:
      adapter_names: '*'
      ipv4_addresses:
      - '{{ upstream_dns_1 }}'
      - '{{ upstream_dns_2 }}'
    delegate_to: '{{ dc_address }}'

  - name: Stop the time service
    win_service:
      name: w32time
      state: stopped
    delegate_to: '{{ dc_address }}'

  - name: Set NTP Servers
    win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:"{{ntp_servers}}"'
    delegate_to: '{{ dc_address }}'  

  - name: Start the time service
    win_service:
      name: w32time
      state: started  
    delegate_to: '{{ dc_address }}'

    #Now before proceeding disable the windows firewall. Otherwise the domain firewall policy will prevent later tasks from succeeding after the system reboots. You can re-enable it and set rules to your liking once the playbook is complete.
  - name: Disable firewall for Domain, Public and Private profiles
    win_firewall:
      state: disabled
      profiles:
      - Domain
      - Private
      - Public
    tags: disable_firewall
    delegate_to: '{{ dc_address }}'
  
  - name: Change the hostname 
    win_hostname:
      name: '{{ dc_hostname }}'
    register: res
    delegate_to: '{{ dc_address }}'

  - name: Reboot
    win_reboot:
    when: res.reboot_required   
    delegate_to: '{{ dc_address }}'

  # DEPLOY AD
  - name: Install Active Directory
    win_feature: >
        name=AD-Domain-Services
        include_management_tools=yes
        include_sub_features=yes
        state=present
    register: result
    delegate_to: '{{ dc_address }}'

  - name: Create Domain
    win_domain: >
      dns_domain_name='{{ domain_name }}'
      safe_mode_password='{{ recovery_password }}'
    register: ad
    delegate_to: "{{ dc_address }}"

  - name: reboot server
    win_reboot:
      msg: "Installing AD. Rebooting..."
      pre_reboot_delay: 15
    when: ad.changed
    delegate_to: "{{ dc_address }}"

  - name: Set internal DNS server 
    win_dns_client:
      adapter_names: '*'
      ipv4_addresses:
      - '127.0.0.1'
    delegate_to: '{{ dc_address }}'

  - name: Create reverse DNS zone
    win_shell: "Add-DnsServerPrimaryZone -NetworkID {{reverse_dns_zone}} -ReplicationScope Forest"
    delegate_to: "{{ dc_address }}"    
    retries: 30
    delay: 60
    register: result           
    until: result is succeeded


